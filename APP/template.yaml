AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  LIFF-Demo

  SAM Template for LIFF-Demo-Name-Paper

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev
Mappings:
  EnvironmentMap:
    dev:
      FrontS3BucketName: S3Bucket Name
      # ### ACCESS LOG SETTING ###
      # LogS3Bucket: S3BucketName for AccessLog
      # LogFilePrefix: liff-business-card-dev/
      # ### ACCESS LOG SETTING ###
    prod:
      FrontS3BucketName: S3Bucket Name
      # ### ACCESS LOG SETTING ###
      # LogS3Bucket: S3BucketName for AccessLog
      # LogFilePrefix: liff-business-card/
      # ### ACCESS LOG SETTING ###

Resources:
  FrontBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !FindInMap [EnvironmentMap, !Ref Environment, FrontS3BucketName]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      # ### ACCESS LOG SETTING ###
      # LoggingConfiguration:
      #   DestinationBucketName:
      #     !FindInMap [EnvironmentMap, !Ref Environment, LogS3Bucket]
      #   LogFilePrefix:
      #     !FindInMap [EnvironmentMap, !Ref Environment, LogFilePrefix]
      # ### ACCESS LOG SETTING ###
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontBucket
      PolicyDocument:
        Version: "2008-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Action: s3:GetObject
            Sid: 1
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${FrontBucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Condition:
              Bool:
                "aws:SecureTransport": "true"
          - Action: s3:*
            Sid: 2
            Effect: Deny
            Principal: "*"
            Resource: !Sub arn:aws:s3:::${FrontBucket}
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt FrontBucket.DomainName
            Id: !Sub "S3-${FrontBucket}"
            OriginPath: ""
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
          CachedMethods:
            - "HEAD"
            - "GET"
          Compress: false
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: "none"
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub "S3-${FrontBucket}"
          ViewerProtocolPolicy: "redirect-to-https"
        Comment: ""
        PriceClass: "PriceClass_All"
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: "TLSv1"
        Restrictions:
          GeoRestriction:
            RestrictionType: "none"
        HttpVersion: "http2"
        DefaultRootObject: "index.html"
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt FrontBucket.DomainName
          Prefix: log
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CloudFrontDomainName:
    Description: "CloudFront for LIFF Product Demo"
    Value: !GetAtt CloudFrontDistribution.DomainName
  S3:
    Description: "S3 Bucket for Frontend"
    Value: !Ref FrontBucket
